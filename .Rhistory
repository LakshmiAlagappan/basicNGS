library(org.Hs.eg.db)
# If you need to download these:
# CRAN Repository packages (tidyverse, ggplot2 included in tidyverse, ggrepel)
# install.packages("tidyverse")
Bioconductor packages (DESeq2, clusterProfiler, ComplexHeatmap)
# data handling
library(tidyverse)
# DESeq2
library(DESeq2)
# Graphing
library(ggplot2)
library(ggrepel)
library(ComplexHeatmap)
# Pathway Analysis
library(clusterProfiler)
library(org.Hs.eg.db)
# If you need to download these:
# CRAN Repository packages (tidyverse, ggplot2 included in tidyverse, ggrepel)
# install.packages("tidyverse")
#Bioconductor packages (DESeq2, clusterProfiler, ComplexHeatmap)
#other requirements include: apeglm, org.Hs.eg.db
#if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("DESeq2")
counts <- read.csv("../Data/tutorial_counts.csv", check.names = FALSE)
# data handling
library(tidyverse)
# DESeq2
library(DESeq2)
# Graphing
library(ggplot2)
library(ggrepel)
library(ComplexHeatmap)
# Pathway Analysis
library(clusterProfiler)
library(org.Hs.eg.db)
counts <- read.csv("../data/tutorial_counts.csv", check.names = FALSE)
counts <- read.csv("./data/tutorial_counts.csv", check.names = FALSE)
counts <- read.csv("./data/tutorial_counts.csv", check.names = FALSE)
counts <- read.csv("./data/tutorial_counts.csv", check.names = FALSE)
metadata <- read.csv("./data/tutorial_metadata.csv", row.names = 1)
head(metadata)
counts[duplicated(counts$GeneSymbol),]
counts[,]
# counts$GeneSymbol
# duplicated(counts$GeneSymbol)
# Get an average read of the duplicates
avg_counts <- counts %>%
group_by(GeneSymbol) %>%
summarise(across(everything(), ~mean(.x))) %>%
column_to_rownames("GeneSymbol")
avg_counts
# Check again
avg_counts[duplicated(rownames(avg_counts)),]
# No more duplicated genes
# DESeq2 only accepts integers as it expects raw counts
# 1 for row, 2 for column
str(avg_counts)
avg_counts[] <- apply(avg_counts, 1, FUN = as.integer)
str(avg_counts)
# Get an average read of the duplicates
avg_counts <- counts %>%
group_by(GeneSymbol) %>%
summarise(across(everything(), ~mean(.x))) %>%
column_to_rownames("GeneSymbol")
avg_counts
# All packages need to be downloaded
# install.packages(tidyverse)
# install.packages(ggplot)
# install.packages(ggrepel)
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("DESeq2")
# BiocManager::install("ComplexHeatmap")
# BiocManager::install("clusterProfiler")
# BiocManager::install("org.Hs.eg.db")
# BiocManager::install("apeglm")
## Loading all the necessary packages
library(tidyverse) #data
library(ggplot2) #plot
library(ggrepel) #plot
library(DESeq2) #ngs
library(ComplexHeatmap) #plot
library(clusterProfiler) #pathway
library(org.Hs.eg.db) #pathway
library(apeglm)
counts <- read.csv("./data/tutorial_counts.csv", check.names = FALSE)
metadata <- read.csv("./data/tutorial_metadata.csv", row.names = 1)
str(metadata)
metadata$Strain = factor(metadata$Strain)
metadata$Strain = relevel(metadata$Strain, ref = "Mock")
head(counts)
dim(counts)
length(unique(counts$GeneSymbol))
counts[duplicated(counts$GeneSymbol),]
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),mean))%>%column_to_rownames("GeneSymbol")
avg_counts = avg_counts %>% mutate(across(where(is.numeric),as.integer))#cant do as.integer(avg_counts) as its a tibble not a base data.frame. This also lets go of the gene symbol column (str), and now we have only 6 columns.
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),mean))%>%column_to_rownames("GeneSymbol")
avg_counts = avg_counts %>% mutate(across(where(is.numeric),as.integer))#cant do as.integer(avg_counts) as its a tibble not a base data.frame. This also lets go of the gene symbol column (str), and now we have only 6 columns.
avg_counts
str(avg_counts)
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),~mean(.x)))%>%column_to_rownames("GeneSymbol")
avg_counts = avg_counts %>% mutate(across(where(is.numeric),as.integer))#cant do as.integer(avg_counts) as its a tibble not a base data.frame. This also lets go of the gene symbol column (str), and now we have only 6 columns.
str(avg_counts)
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),mean))%>%column_to_rownames("GeneSymbol")
avg_counts = avg_counts %>% mutate(across(where(is.numeric),as.integer))#cant do as.integer(avg_counts) as its a tibble not a base data.frame. This also lets go of the gene symbol column (str), and now we have only 6 columns.
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),mean))%>%column_to_rownames("GeneSymbol")
avg_counts
avg_counts = avg_counts %>% mutate(across(where(is.numeric),as.integer))#cant do as.integer(avg_counts) as its a tibble not a base data.frame. This also lets go of the gene symbol column (str), and now we have only 6 columns.
avg_counts = avg_counts %>% mutate(across(where(is.numeric),as.integer))#cant do as.integer(avg_counts) as its a tibble not a base data.frame. This also lets go of the gene symbol column (str), and now we have only 6 columns.
avg_counts
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),mean))%>%column_to_rownames("GeneSymbol")
avg_counts = avg_counts %>% mutate(across(everything(),as.integer))#cant do as.integer(avg_counts) as its a tibble not a base data.frame. This also lets go of the gene symbol column (str), and now we have only 6 columns.
avg_counts
avg_counts[] <- apply(avg_counts, 1, FUN = as.integer)
avg_counts
avg_counts = avg_counts %>% mutate(across(everything(),as.integer))#cant do as.integer(avg_counts) as its a tibble not a base data.frame. This also lets go of the gene symbol column (str), and now we have only 6 columns.
avg_counts
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),mean))%>%column_to_rownames("GeneSymbol")
avg_counts[] <- apply(avg_counts, 1, FUN = as.integer)
avg_counts
str(avg_counts)
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),mean))%>%column_to_rownames("GeneSymbol")
avg_counts = avg_counts %>% mutate(across(everything(),as.integer))#cant do as.integer(avg_counts) as its a tibble not a base data.frame. This also lets go of the gene symbol column (str), and now we have only 6 columns.
str(avg_counts)
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),mean))%>%column_to_rownames("GeneSymbol")
head(avg_counts)
avg_counts[] <- apply(avg_counts, 1, FUN = as.integer)
head(avg_counts)
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),mean))%>%column_to_rownames("GeneSymbol")
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),mean))%>%column_to_rownames("GeneSymbol")
avg_counts = avg_counts %>% mutate(across(everything(),as.integer))#cant do as.integer(avg_counts) as its a tibble not a base data.frame. This also lets go of the gene symbol column (str), and now we have only 6 columns.
head(avg_counts)
counts(dds_filtered, normalized = TRUE)
# All packages need to be downloaded
# install.packages(tidyverse)
# install.packages(ggplot)
# install.packages(ggrepel)
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("DESeq2")
# BiocManager::install("ComplexHeatmap")
# BiocManager::install("clusterProfiler")
# BiocManager::install("org.Hs.eg.db")
# BiocManager::install("apeglm")
## Loading all the necessary packages
library(tidyverse) #data
library(ggplot2) #plot
library(ggrepel) #plot
library(DESeq2) #ngs
library(ComplexHeatmap) #plot
library(clusterProfiler) #pathway
library(org.Hs.eg.db) #pathway
library(apeglm)
counts <- read.csv("./data/tutorial_counts.csv", check.names = FALSE)
metadata <- read.csv("./data/tutorial_metadata.csv", row.names = 1)
str(metadata)
metadata$Strain = factor(metadata$Strain)
metadata$Strain = relevel(metadata$Strain, ref = "Mock")
head(counts)
dim(counts)
length(unique(counts$GeneSymbol))
counts[duplicated(counts$GeneSymbol),]
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),mean))%>%column_to_rownames("GeneSymbol")
avg_counts[] <- apply(avg_counts, 1, FUN = as.integer)
avg_counts = avg_counts %>% mutate(across(everything(),as.integer))#cant do as.integer(avg_counts) as its a tibble not a base data.frame. This also lets go of the gene symbol column (str), and now we have only 6 columns.
dds = DESeqDataSetFromMatrix(avg_counts, colData = metadata, design = ~ Strain) #relationship between all the variables (~) with Strain
saveRDS(dds, "./results/dds.rds")
#default is normalized = FALSE. For every gene, we check whether the counts in the strain is >= 10 for alteast >= 3 samples
dim(dds)
idx <- rowSums(counts(dds, normalized=FALSE) >= 10) >= 3
dds_filtered <- dds[idx, ]
dim(dds_filtered) # So many of them have so few counts that we have ignored them
dds_deseq = DESeq(dds_filtered)
saveRDS(dds_deseq, "./results/dds_deseq.rds")
head(results(dds_deseq))
#MLE: Maximum liklihood estimation
#baseMEan is the average normalizes count values with the size factor
#log2 fold change indicates the expression level of the test wrt to the control
#lfcse log fold change standard error
#stat, pvalue and adjusted for many samples
#Size factors
sizeFactors(dds_deseq) #We likely divide this on the counts to get normalized counts
colSums(counts(dds_filtered)) #total counts for every sample. this is sort of proportional to the size factors
#Dispersion
# Dispersion is a measure of spread or variability in the data. Dispersion of 0.01 means that there is 10% variation around the mean expected across biological replicates
# lower mean, higher dispersion; higher mean lower dispersion; same mean, depends on variance
# Dispersion is an estimation (different from variance) based on shrinkage. Increasing mean counts decreasing dispersion. Any different plot will be bad and not suitable for DESEQ
plotDispEsts(dds_deseq)
dds_deseq_sig_res = results(dds_deseq, independentFiltering = TRUE, alpha = 0.05)
summary(dds_deseq_sig_res)
dds_deseq_sig_res_lfc <- lfcShrink(dds_deseq, coef = 2, res = dds_deseq_sig_res) #This doesn't change the baseMean, pvalue or the adjusted p value. Only the log fold change is reduced and the associated lfcse is changed.
counts(dds_filtered, normalized = TRUE)
counts(dds_deseq, normalized = TRUE)
# All packages need to be downloaded
# install.packages(tidyverse)
# install.packages(ggplot)
# install.packages(ggrepel)
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("DESeq2")
# BiocManager::install("ComplexHeatmap")
# BiocManager::install("clusterProfiler")
# BiocManager::install("org.Hs.eg.db")
# BiocManager::install("apeglm")
## Loading all the necessary packages
library(tidyverse) #data
library(ggplot2) #plot
library(ggrepel) #plot
library(DESeq2) #ngs
library(ComplexHeatmap) #plot
library(clusterProfiler) #pathway
library(org.Hs.eg.db) #pathway
library(apeglm)
counts <- read.csv("./data/tutorial_counts.csv", check.names = FALSE)
metadata <- read.csv("./data/tutorial_metadata.csv", row.names = 1)
str(metadata)
metadata$Strain = factor(metadata$Strain)
metadata$Strain = relevel(metadata$Strain, ref = "Mock")
head(counts)
dim(counts)
length(unique(counts$GeneSymbol))
counts[duplicated(counts$GeneSymbol),]
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),mean))%>%column_to_rownames("GeneSymbol")
avg_counts = avg_counts %>% mutate(across(everything(),as.integer))#cant do as.integer(avg_counts) as its a tibble not a base data.frame. This also lets go of the gene symbol column (str), and now we have only 6 columns.
dds = DESeqDataSetFromMatrix(avg_counts, colData = metadata, design = ~ Strain) #relationship between all the variables (~) with Strain
saveRDS(dds, "./results/dds.rds")
#default is normalized = FALSE. For every gene, we check whether the counts in the strain is >= 10 for alteast >= 3 samples
dim(dds)
idx <- rowSums(counts(dds, normalized=FALSE) >= 10) >= 3
dds_filtered <- dds[idx, ]
dim(dds_filtered) # So many of them have so few counts that we have ignored them
dds_deseq = DESeq(dds_filtered)
saveRDS(dds_deseq, "./results/dds_deseq.rds")
head(results(dds_deseq))
#MLE: Maximum liklihood estimation
#baseMEan is the average normalizes count values with the size factor
#log2 fold change indicates the expression level of the test wrt to the control
#lfcse log fold change standard error
#stat, pvalue and adjusted for many samples
#Size factors
sizeFactors(dds_deseq) #We likely divide this on the counts to get normalized counts
colSums(counts(dds_filtered)) #total counts for every sample. this is sort of proportional to the size factors
#Dispersion
# Dispersion is a measure of spread or variability in the data. Dispersion of 0.01 means that there is 10% variation around the mean expected across biological replicates
# lower mean, higher dispersion; higher mean lower dispersion; same mean, depends on variance
# Dispersion is an estimation (different from variance) based on shrinkage. Increasing mean counts decreasing dispersion. Any different plot will be bad and not suitable for DESEQ
plotDispEsts(dds_deseq)
dds_deseq_sig_res = results(dds_deseq, independentFiltering = TRUE, alpha = 0.05)
summary(dds_deseq_sig_res)
dds_deseq_sig_res_lfc <- lfcShrink(dds_deseq, coef = 2, res = dds_deseq_sig_res) #This doesn't change the baseMean, pvalue or the adjusted p value. Only the log fold change is reduced and the associated lfcse is changed.
countNorm = counts(dds_deseq, normalized = TRUE) %>% as.data.frame()
head(countNorm)
dds_deseq_sig_res_lfc
Now, we make the de dataframe for visualization
res_de = data.frame(dds_deseq_sig_res_lfc)
res_de
head(res_de)
res_de = res_de %>% drop_na(padj)
head(res_de)
res_de = data.frame(dds_deseq_sig_res_lfc)
head(res_de)
res_de = data.frame(dds_deseq_sig_res_lfc)
res_de = res_de %>% drop_na(padj)
head(res_de)
dim(res_de)
res_de%>% filter(get(padj_name))
res_de%>% filter(get(padj) < 0.05)
res_de%>% filter(get(padj) < 0.05)
res_de
dds_deseq_sig_res_lfc%>% filter(get(padj) < 0.05)
res_de%>% filter(get(padj) < 0.05)
res_de%>% filter(get(padj) < 0.05, get(FC)>logFC | get(FC) < -log2FoldChange)
res_de%>% filter(get("padj") < 0.05, get("FC")>logFC | get("FC") < -logFC)
res_de
res_de%>% filter(get("padj") < 0.05, get("log2FoldChange")>logFC | get("log2FoldChange") < -logFC)
res_de%>% filter(get("padj") < 0.05, get("log2FoldChange")>2 | get("log2FoldChange") < -2)
cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'FC', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
return(cumulative_DE_df)
}
cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'logFoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
return(cumulative_DE_df)
}
cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
return(cumulative_DE_df)
}
cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE_dfans
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
print(logFC)
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
print(logFC)
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
print(dim(nDE))
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
print(logFC)
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
print(dim(nDE_vct))
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
print(logFC)
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
print(nDE_vct)
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
print(logFC)
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
print(nDE_vct)
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
print(cumulative_DE_df)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
print(cumulative_DE_df)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
print(nDE_vct)
print(FC_range)
cumulative_DE_df = data.frame(logFC = FC_range, nDE = nDE_vct)
print(cumulative_DE_df)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
data.frame(logfc = seq(1:10), nde = seq(11:20))
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
print(nDE_vct)
print( data.frame(logFC = FC_range, nDE = nDE_vct))
cumulative_DE_df = data.frame(logFC = FC_range, nDE = nDE_vct)
print(cumulative_DE_df)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
print(nDE_vct)
print(data.frame("logFC" = FC_range, "nDE" = nDE_vct))
cumulative_DE_df = data.frame(logFC = FC_range, nDE = nDE_vct)
print(cumulative_DE_df)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
df_df = res_de
FC_limit = 2, padj_name = 'padj',
FC_limit = 2
padj_name = 'padj'
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2
FC_name = 'log2FoldChange'
padj_threshold = 0.05, step = 0.2
padj_threshold = 0.05
step = 0.2
FC_range = seq(0, FC_limit, step)
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
nDE_vct
FC_range
data.frame("logFC" = FC_range, "nDE" = nDE_vct)
FC_range
list(FC_range)
FC_range
data.frame(FC_range,nDE_vct)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
cumulative_DE_df = data.frame(FC_range,nDE_vct)
colnames(cumulative_DE_df) = c("Log_FC", "nDE")
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE_dfans
