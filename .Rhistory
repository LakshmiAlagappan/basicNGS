return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
print(logFC)
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
print(dim(nDE))
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
print(logFC)
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
print(dim(nDE_vct))
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
print(logFC)
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
print(nDE_vct)
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
print(logFC)
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
print(nDE_vct)
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
print(cumulative_DE_df)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
cumulative_DE_df <- data.frame(logFC = FC_range, nDE = nDE_vct)
print(cumulative_DE_df)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
print(nDE_vct)
print(FC_range)
cumulative_DE_df = data.frame(logFC = FC_range, nDE = nDE_vct)
print(cumulative_DE_df)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
data.frame(logfc = seq(1:10), nde = seq(11:20))
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
print(nDE_vct)
print( data.frame(logFC = FC_range, nDE = nDE_vct))
cumulative_DE_df = data.frame(logFC = FC_range, nDE = nDE_vct)
print(cumulative_DE_df)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
print(nDE_vct)
print(data.frame("logFC" = FC_range, "nDE" = nDE_vct))
cumulative_DE_df = data.frame(logFC = FC_range, nDE = nDE_vct)
print(cumulative_DE_df)
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
df_df = res_de
FC_limit = 2, padj_name = 'padj',
FC_limit = 2
padj_name = 'padj'
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2
FC_name = 'log2FoldChange'
padj_threshold = 0.05, step = 0.2
padj_threshold = 0.05
step = 0.2
FC_range = seq(0, FC_limit, step)
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
nDE_vct
FC_range
data.frame("logFC" = FC_range, "nDE" = nDE_vct)
FC_range
list(FC_range)
FC_range
data.frame(FC_range,nDE_vct)
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
cumulative_DE_df = data.frame(FC_range,nDE_vct)
colnames(cumulative_DE_df) = c("Log_FC", "nDE")
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
cumulative_DE_dfans
# Chunk 1
# All packages need to be downloaded
# install.packages(tidyverse)
# install.packages(ggplot)
# install.packages(ggrepel)
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("DESeq2")
# BiocManager::install("ComplexHeatmap")
# BiocManager::install("clusterProfiler")
# BiocManager::install("org.Hs.eg.db")
# BiocManager::install("apeglm")
## Loading all the necessary packages
library(tidyverse) #data
library(ggplot2) #plot
library(ggrepel) #plot
library(DESeq2) #ngs
library(ComplexHeatmap) #plot
library(clusterProfiler) #pathway
library(org.Hs.eg.db) #pathway
library(apeglm)
source("./visualizer.R")
# Chunk 2
counts <- read.csv("./data/tutorial_counts.csv", check.names = FALSE)
metadata <- read.csv("./data/tutorial_metadata.csv", row.names = 1)
# Chunk 3
str(metadata)
metadata$Strain = factor(metadata$Strain)
metadata$Strain = relevel(metadata$Strain, ref = "Mock")
# Chunk 4
head(counts)
dim(counts)
length(unique(counts$GeneSymbol))
counts[duplicated(counts$GeneSymbol),]
# Chunk 5
avg_counts = counts %>% group_by(GeneSymbol) %>% summarise(across(everything(),mean))%>%column_to_rownames("GeneSymbol")
avg_counts = avg_counts %>% mutate(across(everything(),as.integer))#cant do as.integer(avg_counts) as its a tibble not a base data.frame. This also lets go of the gene symbol column (str), and now we have only 6 columns.
# Chunk 6
dds = DESeqDataSetFromMatrix(avg_counts, colData = metadata, design = ~ Strain) #relationship between all the variables (~) with Strain
saveRDS(dds, "./results/dds.rds")
# Chunk 7
#default is normalized = FALSE. For every gene, we check whether the counts in the strain is >= 10 for alteast >= 3 samples
dim(dds)
idx <- rowSums(counts(dds, normalized=FALSE) >= 10) >= 3
dds_filtered <- dds[idx, ]
dim(dds_filtered) # So many of them have so few counts that we have ignored them
# Chunk 8
dds_deseq = DESeq(dds_filtered)
saveRDS(dds_deseq, "./results/dds_deseq.rds")
head(results(dds_deseq))
#MLE: Maximum liklihood estimation
#baseMEan is the average normalizes count values with the size factor
#log2 fold change indicates the expression level of the test wrt to the control
#lfcse log fold change standard error
#stat, pvalue and adjusted for many samples
# Chunk 9
#Size factors
sizeFactors(dds_deseq) #We likely divide this on the counts to get normalized counts
colSums(counts(dds_filtered)) #total counts for every sample. this is sort of proportional to the size factors
#Dispersion
# Dispersion is a measure of spread or variability in the data. Dispersion of 0.01 means that there is 10% variation around the mean expected across biological replicates
# lower mean, higher dispersion; higher mean lower dispersion; same mean, depends on variance
# Dispersion is an estimation (different from variance) based on shrinkage. Increasing mean counts decreasing dispersion. Any different plot will be bad and not suitable for DESEQ
plotDispEsts(dds_deseq)
# Chunk 10
dds_deseq_sig_res = results(dds_deseq, independentFiltering = TRUE, alpha = 0.05)
summary(dds_deseq_sig_res)
dds_deseq_sig_res_lfc <- lfcShrink(dds_deseq, coef = 2, res = dds_deseq_sig_res) #This doesn't change the baseMean, pvalue or the adjusted p value. Only the log fold change is reduced and the associated lfcse is changed.
dds_deseq_sig_res_lfc
# Chunk 11
res_de = data.frame(dds_deseq_sig_res_lfc)
res_de = res_de %>% drop_na(padj)
head(res_de)
# Chunk 12
countNorm = counts(dds_deseq, normalized = TRUE) %>% as.data.frame()
head(countNorm)
# Chunk 13
cumulative_DE <- function(df_df, FC_limit = 2, padj_name = 'padj',
FC_name = 'log2FoldChange', padj_threshold = 0.05, step = 0.2){
FC_range = seq(0, FC_limit, step)
nDE_vct <- c()
for (logFC in FC_range){
nDE = df_df %>% filter(get(padj_name) < padj_threshold,
get(FC_name) > logFC | get(FC_name) < -logFC)
nDE_vct <- append(nDE_vct, length(rownames(nDE)))
}
cumulative_DE_df = data.frame(FC_range,nDE_vct)
colnames(cumulative_DE_df) = c("Log_FC", "nDE")
return(cumulative_DE_df)
}
cumulative_DE_dfans = cumulative_DE(res_de)
source("./visualizer.R")
plot_line(res_de)
source("./visualizer.R")
plot_line(res_de)
res_de
plot_line(cumulative_DE_dfans)
cumulative_DE_dfans
df = cumulative_DE_dfans
reshape2::melt(df, id.vars = 1)
reshape2::melt(df, id.vars = "Log_FC")
source("D:/nBox/Projects/basicNGS/visualizer.R")
source("./visualizer.R")
plot_line(cumulative_DE_dfans)
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_line(cumulative_DE_dfans)
source("D:/nBox/Projects/basicNGS/visualizer.R")
source("D:/nBox/Projects/basicNGS/visualizer.R")
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_line(cumulative_DE_dfans)
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_line(cumulative_DE_dfans)
cumulative_DE_dfans
cumulative_DE_dfans[,3] = cumulative_DE_dfans[,3]+1000
cumulative_DE_dfans[,3] = cumulative_DE_dfans[,2]+1000
plot_line(cumulative_DE_dfans)
plot_line(cumulative_DE_dfans, marker = TRUE)
plot_line(cumulative_DE_dfans, c1, c("Cumulative DE vs Log2FC", "Log 2 Fold Change", "Cummulative Differential Expression"), marker = TRUE)
cumulative_DE_dfans = cumulative_DE(res_de)
plot_line(cumulative_DE_dfans, c1, c("Cumulative DE vs Log2FC", "Log 2 Fold Change", "Cummulative Differential Expression"), marker = TRUE)
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_line(cumulative_DE_dfans, c1, c("Cumulative DE vs Log2FC", "Log 2 Fold Change", "Cummulative Differential Expression"), marker = TRUE)
source("D:/nBox/Projects/basicNGS/visualizer.R")
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_line(cumulative_DE_dfans, c1, c("Cumulative DE vs Log2FC", "Log 2 Fold Change", "Cummulative Differential Expression"), marker = TRUE)
install.packages("directlabels")
plot_line(cumulative_DE_dfans, c1, c("Cumulative DE vs Log2FC", "Log 2 Fold Change", "Cummulative Differential Expression"), marker = TRUE)
?direct.label
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_line(cumulative_DE_dfans, c1, c("Cumulative DE vs Log2FC", "Log 2 Fold Change", "Cummulative Differential Expression"), marker = TRUE)
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_line(cumulative_DE_dfans, c1, c("Cumulative DE vs Log2FC", "Log 2 Fold Change", "Cummulative Differential Expression"), marker = TRUE)
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_line(cumulative_DE_dfans, c1, c("Cumulative DE vs Log2FC", "Log 2 Fold Change", "Cummulative Differential Expression"), marker = TRUE)
source("D:/nBox/Projects/basicNGS/visualizer.R")
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_line(cumulative_DE_dfans, c1, c("Cumulative DE vs Log2FC", "Log 2 Fold Change", "Cummulative Differential Expression"), marker = TRUE)
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_line(cumulative_DE_dfans, c1, c("Cumulative DE vs Log2FC", "Log 2 Fold Change", "Cummulative Differential Expression"), marker = TRUE)
logFC_name = 'log2FoldChange'
logFC_threshold = 2
padj_name = 'padj'
padj_threshold = 0.05
df_df = res_de
data.frame(df_df) %>%
mutate(diffExpressed = case_when(get(padj_name) < padj_threshold &
get(logFC_name) > logFC_threshold ~ "UP",
get(padj_name) < padj_threshold &
get(logFC_name) < -logFC_threshold ~ "DOWN",
.default = "NO"), neglogpadj = -log10(get(padj_name))
)
source("D:/nBox/Projects/basicNGS/visualizer.R")
source("D:/nBox/Projects/basicNGS/visualizer.R")
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_volcano(volcano_res, c("Volano Plot", "Log2 Fold Change", "- Log10 p-adj", "Genes"))
volcano_res = calc_volcano(res_de)
calc_volcano <- function(df_df,logFC_name = 'log2FoldChange', logFC_threshold = 2,
padj_name = 'padj', padj_threshold = 0.05){
df_df_res <- data.frame(df_df) %>%
mutate(diffExpressed = case_when(get(padj_name) < padj_threshold &
get(logFC_name) > logFC_threshold ~ "UP",
get(padj_name) < padj_threshold &
get(logFC_name) < -logFC_threshold ~ "DOWN",
.default = "NO"), neglog10padj = -log10(get(padj_name)))
#We have mutated the df to add two columns, diffExpressed and neg_log10_padj
df_df_res$diffExpressed = factor(diffExpressed, levels = c("UP", "DOWN", "NO"))
return(df_df_res)
}
volcano_res = calc_volcano(res_de)
calc_volcano <- function(df_df,logFC_name = 'log2FoldChange', logFC_threshold = 2,
padj_name = 'padj', padj_threshold = 0.05){
df_df_res <- data.frame(df_df) %>%
mutate(diffExpressed = case_when(get(padj_name) < padj_threshold &
get(logFC_name) > logFC_threshold ~ "UP",
get(padj_name) < padj_threshold &
get(logFC_name) < -logFC_threshold ~ "DOWN",
.default = "NO"), neglog10padj = -log10(get(padj_name)))
#We have mutated the df to add two columns, diffExpressed and neg_log10_padj
df_df_res$diffExpressed = factor(df_df_res$diffExpressed, levels = c("UP", "DOWN", "NO"))
return(df_df_res)
}
volcano_res = calc_volcano(res_de)
plot_volcano(volcano_res, c("Volano Plot", "Log2 Fold Change", "- Log10 p-adj", "Genes"))
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_volcano(volcano_res, col_vol, c("Volano Plot", "Log2 Fold Change", "- Log10 p-adj", "Genes"))
stringr::str_sub("GOBP", start = 3L)
?enricher
?read.gmt
source("D:/nBox/Projects/basicNGS/visualizer.R")
res_de
res_de_up = res_de%>%filter(padj < 0.05 & log2FoldChange >2 )
gobp_up <- enrich_ez(genelist = rownames(res_de_up),
universe = rownames(res_de),
select_dataset = "GOBP",
organism = "org.Hs.eg.db")
enrich_ez <- function(genelist, universe, select_dataset, organism="org.Hs.eg.db") {
#If the database has the word "GO", snip the remaining into ont
if (stringr::str_detect(select_dataset, "GO")) {
ont <- stringr::str_sub(select_dataset, start = 3L) #ont is ontology
select_enrich = clusterProfiler::enrichGO(gene = genelist, universe = universe,
OrgDb = organism, keyType = "SYMBOL",
readable = F, ont = ont,
pvalueCutoff = 0.1, qvalueCutoff = 0.10)
} else {
db <- clusterProfiler::read.gmt(select_dataset)
select_enrich = clusterProfiler::enricher(genelist, TERM2GENE = db, universe = universe,
pvalueCutoff = 0.1, qvalueCutoff = 0.10)
}
return(select_enrich)
}
res_de_up = res_de%>%filter(padj < 0.05 & log2FoldChange >2 )
gobp_up <- enrich_ez(genelist = rownames(res_de_up),
universe = rownames(res_de),
select_dataset = "GOBP",
organism = "org.Hs.eg.db")
gobp_up
gobp_up@result
head(gobp_up@result)
colnames(gobp_up@readable)
colnames(gobp_up@result)
enrich_res_df = gobp_up@result
enrich_res_df
enrich_plotdf = enrich_res_df %>% mutate(neglog10adjp = log(p.adjust, 10)*(-1))
enrich_plotdf = enrich_plotdf %>% filter(p.adjust < 0.05) %>% head(10)
print(enrich_plotdf)
reorder(Description, neglog10adjp, sum)
ggplot(enrich_plotdf, aes(x = reorder(Description, neglog10adjp, sum),
y=neglog10adjp))
ggplot(enrich_plotdf, aes(x = reorder(Description, neglog10adjp, sum),
y=neglog10adjp)) +
geom_col(fill = fill) +
coord_flip() +
labs(title = ll[[1]], x = ll[[2]], y = ll[[3]], color = ll[[4]])
ggplot(enrich_plotdf, aes(x = reorder(Description, neglog10adjp, sum),
y=neglog10adjp)) +
geom_col(fill = fill) +
coord_flip()
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_enrich_std(res_de_up)
plot_enrich_std(gobp_up)
gobp_up
gobp_up@gene
dim(gobp_up@gene)
length(gobp_up@gene)
dim(res_de_up)
gobp_up@result$geneID[1]
gobp_up@organism
gobp_up@ontology
gobp_up@keytype
gobp_up@gene2Symbol
gobp_up@geneSets
gobp_up@geneSets$`GO:0000002`
gobp_up@termsim
gobp_up@method
gobp_up@dr
enrich_ez <- function(genelist, universe, select_dataset, organism="org.Hs.eg.db") {
#If the database has the word "GO", snip the remaining into ont
if (stringr::str_detect(select_dataset, "GO")) {
ont <- stringr::str_sub(select_dataset, start = 3L) #ont is ontology
select_enrich = clusterProfiler::enrichGO(gene = genelist, universe = universe,
OrgDb = organism, keyType = "SYMBOL",
readable = T, ont = ont,
pvalueCutoff = 0.1, qvalueCutoff = 0.10)
} else {
db <- clusterProfiler::read.gmt(select_dataset)
select_enrich = clusterProfiler::enricher(genelist, TERM2GENE = db, universe = universe,
pvalueCutoff = 0.1, qvalueCutoff = 0.10)
}
return(select_enrich)
}
res_de_up = res_de%>%filter(padj < 0.05 & log2FoldChange >2 )
gobp_up <- enrich_ez(genelist = rownames(res_de_up),
universe = rownames(res_de),
select_dataset = "GOBP",
organism = "org.Hs.eg.db")
head(gobp_up)
plot_enrich_std(gobp_up@result, col_enrich, c("", "-Log10 adj-p",)
pos_neg = "pos", "GOBP upregulated pathways (Virus vs Mock)")
plot_enrich_std(gobp_up@result, col_enrich, c("", "-Log10 adj-p","Description", "Bar"),
pos_neg = "pos")
plot_enrich_std(gobp_up@result, col_enrich, c("","Description", "-Log10 adj-p","Bar"),
pos_neg = "pos")
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_enrich_std(gobp_up@result, col_enrich, c("","Description", "-Log10 adj-p","Bar"),
pos_neg = "pos")
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_enrich_std(gobp_up@result, col_enrich, c("","Description", "-Log10 adj-p","Bar"),
pos_neg = "pos")
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_enrich_std(gobp_up@result, col_enrich, c("","Description", "-Log10 adj-p","Bar"),
pos_neg = "pos")
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_enrich_std(gobp_up@result, col_enrich, c("","Description", "-Log10 adj-p","Bar"),
pos_neg = "pos")
source("D:/nBox/Projects/basicNGS/visualizer.R")
plot_enrich_std(gobp_up@result, col_enrich, c("","Description", "-Log10 adj-p","Bar"),
pos_neg = "pos")
res_de_down = res_de%>%filter(padj < 0.05 & log2FoldChange < -2 )
gobp_up <- enrich_ez(genelist = rownames(res_de_down),
universe = rownames(res_de),
select_dataset = "GOBP",
organism = "org.Hs.eg.db")
res_de_down = res_de%>%filter(padj < 0.05 & log2FoldChange < -2 )
gobp_down <- enrich_ez(genelist = rownames(res_de_down),
universe = rownames(res_de),
select_dataset = "GOBP",
organism = "org.Hs.eg.db")
head(gobp_down)
plot_enrich_std(gobp_up@result, col_enrich, c("","Description", "-Log10 adj-p","Bar"),
pos_neg = "neg")
source("D:/nBox/Projects/basicNGS/visualizer.R")
cnetplot(gobp_down,
showCategory = 5,
color.params = list(foldChange = res_de_down$log2FoldChange),
cex.params = list(category_label = 0.8,
gene_label = 0.6)
)
res_de$log2FoldChange
logfc_list <- res_de$log2FoldChange
names(logfc_list) <- rownames(res_de)
logfc_list <- sort(logfc_list, decreasing = TRUE) # GSEA requires a rank in decreasing order
logfc_list
set.seed(123) # keeps results consistent as gsea relies on random sampling
set.seed(123) # keeps results consistent as gsea relies on random sampling
gobp_gsea <- gseGO(geneList=logfc_list, ont ="BP",
keyType = "SYMBOL", minGSSize = 3,
maxGSSize = 800, pvalueCutoff = 0.05,
verbose = TRUE, OrgDb = org.Hs.eg.db,
pAdjustMethod = "fdr")
gobp_gsea
gobp_gsea@result
head(gobp_gsea@result)
plot_enrich_std(gobp_gsea@result, col_enrich, c("","Description", "-Log10 adj-p","Bar"),
pos_neg = "neg")
BTM <- read.gmt("../data/BTM.gmt")
BTM <- read.gmt("../data/BTM.gmt")
BTM <- read.gmt("../data/BTM.gmt")
BTM <- read.gmt("../data/BTM.gmt")
BTM <- read.gmt("./data/BTM.gmt")
btm_gsea <- GSEA(geneList = logfc_list, TERM2GENE=BTM,
minGSSize = 3, maxGSSize = 800, pvalueCutoff = 0.05,
verbose = TRUE, pAdjustMethod = "fdr")
